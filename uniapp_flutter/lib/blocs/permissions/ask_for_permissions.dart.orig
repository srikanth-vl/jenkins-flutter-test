import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:toast/toast.dart';


/* PermissionGroup.location,
   PermissionGroup.camera,
   PermissionGroup.locationAlways,
   PermissionGroup.phone,
   PermissionGroup.sensors,
   PermissionGroup.storage,
   PermissionGroup.microphone,*/

class AskForPermission {
  PermissionStatus _status;
  BuildContext context;
  Map<PermissionGroup, PermissionStatus> permissions;


  void _updateStatus(PermissionStatus status) {
    if (status != _status) {
        _status = status;
    }
  }

  void getPermissions(List<PermissionGroup> permissionGroups) async {
    permissions = await PermissionHandler().requestPermissions(permissionGroups);
  }

  Future<List<PermissionGroup>> checkAndValidatePermission(List<PermissionGroup> permissionGroups) async {
    List<PermissionGroup> deniedPermissions = [];
    for(PermissionGroup permissionGroup in permissionGroups) {
      PermissionHandler().requestPermissions([
        permissionGroup,
      ]).then((value){
         bool permission = _onPermissionRequested(permissionGroup);
         if (!permission) {
           deniedPermissions.add(permissionGroup);
         }
      });
    }
    return deniedPermissions;
  }

  bool _onPermissionRequested(PermissionGroup permissionGroup) {
    if(permissions[permissionGroup] == null) {
      return false;
    }
    final status = permissions[permissionGroup];
    if (status != PermissionStatus.granted) {
      return false;
    }
    return true;
  }


  /*Future<bool> checkPermission(PermissionGroup permissionGroup) async{
      PermissionHandler().requestPermissions([
        permissionGroup,
      ]).then((value) async{
        bool stat = await _onStatusRequested(permissions,permissionGroup);
        print('status ${stat}');
        return stat;
      });
  }



  Future<bool> _onStatusRequested(Map<PermissionGroup, PermissionStatus> statuses, PermissionGroup permissionGroup) async {
    final status = statuses[permissionGroup];
    if (status != PermissionStatus.granted) {
      //todo: print toast msg here
      Toast.show("Please go to Settings to enable $permissionGroup", context, duration: Toast.LENGTH_SHORT, gravity: Toast.BOTTOM);
//      PermissionHandler().openAppSettings();
    } else {
      _updateStatus(status);
      return true;
    }
  }*/

  /*Future<bool> getPermission(PermissionGroup permissionGroup) async {
    if (permissions[permissionGroup] == PermissionStatus.granted) {
      return true;
    } else if (permissions[permissionGroup] == PermissionStatus.denied) {
      askPermission(permissionGroup);
      bool isSet = await getPermission(permissionGroup);
      if (isSet) {
        return true;
      }
      return false;
    } else if (permissions[permissionGroup] == PermissionStatus.disabled) {
      print("Permission restiricted");
      Toast.show(
          "This App Requires $permissionGroup, Go to Settings to Enable the permission",
          context,
          duration: Toast.LENGTH_LONG,
          gravity: Toast.BOTTOM);
      return false;
    }
    return false;
  }*/


}